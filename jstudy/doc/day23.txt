# day23

예외처리
==> 프로그램적으로는 문제가 없으나
	(문법상 전혀 에러가 나지 않으나)
	데이터의 문제나 장비의 문제 등에 의해서
	프로그램을 실행하는 도중 발생하는 에러를
		"실행 에러(Run Time Error)"
	라고 표현한다.
	
	이것을 자바에서는 "예외(Exception)"라고 부른다.
	
	문제는 이런 예외는 개발자가 예측해서 이런 문제가 발생했을 경우
	대처하는 방식으로 프로그램을 만들어야 하고
	이처럼 예외가 발생했을 경우 대처하는 방식의 프로그램을
		"예외 처리"
	라고 부른다.
	
	자바에서는 이런 문제점(예외 발생 원인을 개발자가 알고 있어야 한다.)을
	해결하기 위해서 예외처리 문법을 제공해주고 있다.
	
	형식 ]
		(1)
		try {
			(2) 
			실행명령 --> 예외가 발생할 위험요소가 존재하는 부분
			(3)
		}catch(?){
			(4)
		}finally{
			(5)
		}
		(6)
		
	실행순서 ] 
		예외가 발생하는 경우
			==>	1 -> 2 -> 4 -> 5 -> 6
		
		예외가 발생하지 않는 경우
			==> 1 -> 2 -> 3 -> 5 -> 6
				
	주의 ]
		(3)의 경우 예외가 발생하는 경우 실행되지 않는다.
		==> 따라서 try{}의 범위에 따라서
			실행될 수도 있고
			실행이 되지 않을 수 있다.
			
			예 ] try{
					파일 오픈 --> 파일이 없으면 에러 발생
				 }
				 이 부분에서 파일을 읽기를 시도한다면 이것 또한 에러가 발생할 것이다.

				 ==> 해결방법
				 try{
				 	파일 오픈
				 	파일 읽기
				 	파일내용 출력
				 } catch(???){}
	
				 
	자바의 예외 처리 원리
		예외가 발생하면 JVM은 발생한 얘외의 종류를 분석한 후
		예외에 대한 정보르르 객체로 만들어서
		catch 블럭에 그 객체의 주소를 전달한다.
		
	catch의 의미
	==> 예외가 발생하면 그 예외의 정보를 받아서
		개발자가 그 정보를 이용해서 원하는 처리를 해줘야 한다.
		
	다중 catch
	==> try{} 안에 예외 발생 요소가 여러개 복합적인 예외 발생 요소를 가질 수 있다.
		
		이때 반드시 어떤 에러때문인지를 구분해야 하는 경우를 대비해서 
		만들어 놓은 방법이 다중 catch 이다.
		
		
		형식 ]
			try {
			
			} catch(????){
			
			} catch(????){
			
			} catch(????){
			
			}
			...
			} finally {
			
			}
			
			주의사항 ]
				다중 catch를 사용하는 경우
				반드시 catch블럭이 실행될 수 있는 상태로 나열해야한다.
				
				if(age > 10){
					gen = "10대";
				}else if(age > 20){
					gen = "20대";
				}...
				
				
		finally 블럭
		==> 예외발생 여부에 상관없이
			반드시 실행되어야 할 작업이 존재할 경우
			이런 문장을 입력하는 블럭이다.		
				
			형식 ]
				
				try{
				
				}catch(Exception e){
				
				}finally{
					==> 이 안의 문장은 어떤 경우에도 반드시 실행되는 문장이다.
				}	

예외 정보 출력하기
==>				
	1. 예외 정보 클래스 변수를 출력
		==> 예 ] System.out.println(예외정보클래스변수(예 ] e));
			==> 예외의 원인을 파악 할 수 있게 된다.
			
	2. 예외변수.printStackTrace() 함수를 이용하는 방법
		==> 예외의 정보 + 예외가 발생하게 된 위치와 그 경로를 추적해서 출력해준다.
		
	
	예외가 발생하면 개발자가 그것을 수정해서 정상적으로 동작하도록 만드는 행위가 예외처리이다.
	==> 즉, 예외처리의 목적은 프로그램의 정상적인 종료이다.
	
	그런데 정상적으로 동작하도록 만드는 작업은 매우 어려운 일이고 그 경우도 많지 않다.
	
	다만 예외처리를 하는 실제 이유는 예외의 정보를 알아서 사용자에게 왜 프로그램에 문제가 생겼는지 알려주고
	그 프로그램을 정상적으로 종료하도록 하는 것에 목적이 있는 경우가 많다.

	
예외 전이하기
==> 함수는 프로그램의 가장 작은 단위로
	한 가지 작업을 하기 위해서 만든 것이다.
	따라서 함수 안에서 작업을 하다가 예외가 발생하면
	그 함수는 더 이상 실행할 필요가 없는 경우가 많다.
	따라서 함수는 예외를 전이하도록(다른 곳으로 떠 넘기도록) 해 놓은 경우가 있다.
	
	형식 ]
		[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트) throws 예외클래스1, 예외클래스2, ...{
		
		}
	
	의미 ]
		지정한 예외가 발생하면 이 함수는 더 이상 실행해도 의미가 없으므로 실행을 중지시킨다.
		
		*****
		예외가 전이된 함수는
		그 함수를 호출해서 사용하는 곳에서 반드시 예외 처리를 해줘야한다.
	
	예 ] 
		public void service(HttpServletRequest reqest, HttpServletResponse response) throws ServletException, IOException{
	
		}
				
		public void abc() throws FileNotFoundException{
			예외발생시 반드시 해줘야 하는 작업이 있는 경우는 throws해주면 안되고 반드시 예외 처리(try catch)를 해줘야한다. 
		} ==>
		
			이 함수를 사용하는 쪽에서는 
			
			try {
				abc();
			} catch(FileNotFoundException e){
				e.printStackTrace();
			}		
				
			의 형식으로 예외처리를 반드시 해줘야 한다.
			
		public void xyz() throws FileNotFoundException(){
			abc();
		}		
				
	참고 ]
		함수가 예외를 전이하는 함수라도
		예외처리를 하지 않아도 되는 경우가 있다.
		
		전이하는 예외가 RuntimeException 의 하위인 경우에는
		예외처리를 해도 그만, 안해도 그만이다.
		(주로 java.lang 소속 클래스에 있는 함수들이 이런 함수들이 많이 존재한다.)
		
		하지만 되도록이면 하는 것이 좋다.
		

강제 예외 던지기
==> JVM은 예외로 인정하지 않는데(예외처리가 필요하지 않는데)
	프로그램의 목적상 예외로 인정해야 하는 경우가 있을 수 있다.
	
	예 ]
		사원들의 부서번호를 입력받는데 없는 부서 번호 50번을 입력을 받는 경우
		JVM에게 강제로 예외로 알려주는 방법
		
		형식 ]
				throw new 예외클래스();
				
		주의 ]
			예외전이	: throws 예외클래스, ...
			예외던지기	: throw 	new 예외클래스();
			
사용자 예외 클래스 만들기
==> 예외 클래스는 예외의 발생 원인을 알려주는 역할을 담당한다.
	하지만 강제 예외 던지기는 자바가 준비한 예외가 이니므로 예외의 원인을 파악하기 힘들다.
	
	이런 경우 예외의 원인을 파악하는데 어려우므로
	사용자가 예외 정보를 만들어주는 클래스를 따로 만들어서 사용 할 수 있다.				
	
	
	예외클래스 제작 방법]
		1. Exceoption 클래스를 상속 받는 클래스를 만든다.
		2. toString() 를 오버라이드하여 예외의 원인을 출력 할 수 있도록 한다.
		
		
	
===================================================================================================
데이터베이스 구현 ]
	1. ER Model Diagram
	2. ERD
	3. 테이블 명세서
	4. DDL명령
	

========================================================================================
네트워크 프로그래밍 구현 ajax
	1. javascript
	2. sevlet
	3. dao
	4. 실행화면(id check화면)


통합구현 jdbc
	
	1. SmartJdbc
	2. controller
	3. dao
	4. sql	
	
	
	
	
	
	
	
	
	
	
	
				
				
				
				
				
				
				
				