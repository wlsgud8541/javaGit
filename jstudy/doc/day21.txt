# day21

내부 클래스(Inner Class)
==> 클래스 안에 다시 클래스를 만드는 경우 그 클래스를 부르는 명칭

종류 ]
	1. Top Level Inner Class
		==> 형식은 내부 클래스의 형식을 가지지만
			독립적으로 활동하는 클래스
			
		형식 ]
			[접근지정자] static class 클래스이름 {
				클래스 내용
			} 	
			
			==> 내부에서 만들면서 static 속성이 붙으면 Top Level이 된다.
		
		참고 ] 
			클래스이름
			일반 클래스와 달리 내부 클래스의 이름은
				
				바깥클래스이름.내부클래스이름
			의 형식을 취한다.		
			
	***		
	2. 전역 Inner Class
	==> 일반 클래스를 내부 클래스로 만드는 것
		==> 이 클래스를 일반적으로 내부 클래스라고 부른다.
		
		형식 ]
			[접근지정자] class 클래스이름 {
				클래스 내용
			} 
		
		특징 ]
			1. 바깥 클래스의 모든 멤버는 저절로 자기 것인 것처럼 사용 할 수 있다.
			2. 반드시 바깥 클래스가 new 된 이후에 안쪽 클래스를 생성 할 수 있다.
			
				형식 ]
					바깥클래스주소.new 안쪽클래스이름();
			
			3. 바깥 클래스는 안쪽 클래스 멤버를 사용 할 수 없고
				사용하기 원하면 new 시켜서 사용해야 한다.			
			 
		주로 바깥 클래스와 연관된 기능을 가진 클래스를 만들고 싶을 때 많이 사용하는 기법	 
		
	3. 지역 Inner Class
		==> 내부 클래스를 만드는 위치가 바깥클래스의 함수 내에서 만들 경우 이 클래스를 "지역 내부 클래스" 라고 한다.
		
		class Test {
			int a;
			class In01{ //전역 내부 클래스
				
			}
			
			void abc(){
				int num = 10;
				
				class LocalIn{
					// 지역 내부클래스
				}
				
				void aaa(){
					LocalIn li1 = new LocalIn();
				}
			}
		}
	
		특징 ]
			1. 전역 Inner 클래스와 유사하게 바깥 클래스의 멤버를 사용할 수 있다.
			2. 이 클래스는 다른 곳에서는 new 시켜서 사용 할 수 없다.
				오직 그 함수 내에서만 new 시킬 수 있다.
				
	*****
	4. 무명 Inner Class
	==> 이름이 없는 내부 클래스를 말한다.
		
		우리가 프로그램을 만들다보면 클래스의 기능 수정을 위해서
		오버라이드를 해야하는 경우가 발생한다.
		( 어쩔 수 없이 오버라이드가 필요한 경우도 있다. 
			==> 인터페이스, 추상클래스를 상속받아서 클래스를 만드는 경우)
	
		이때 원칙적으로는 다른 클래스에 필요한 클래스를 상속시켜준 후 
		그 클래스에서 오버라이드해서 사용해야 한다.
		
		그런데 이때 간단한 오버라이드 작업을 해야하는 경우
		그 기능 하나 때문에 클래스를 따로 만들어야 하는 불편함이 발생한다.
		
		결론적으로
		무명클래스란 바로 이런 경우를 위해서 만들어진 클래스로
		클래스를 상속받는 순간 new 시키고 필요한 기능을 오버라이드해서 사용하는 방법
		
		따라서 사용자가 클래스의 이름을 만들지 않아도 된다. 라는 의미에서 무명 내부 클래스라 부른다.
		
		형식 ] new 상속해줄클래스이름(){
			   		오버라이드
			   }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	