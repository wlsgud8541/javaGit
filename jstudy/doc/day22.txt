# day22

Properties
==> Map의 역할을 하는 클래스
	
	일반 Map과 차이점은 파일(외부장치)을 이용해서 직접 데이터를 읽어서
	Map처럼 저장 할 수 있고
	Map에 저장된 데이터를 직접 파일(외부장치)로 출력해서 저장할 수 있다.
	
	주의사항 ]
		파일의 내용을 읽을 때 인코딩이 되지 않는다.
		==> 한글 파일의 경우 파일 자체에서 인코딩 하지 않으면
			내용이 한글인 경우 한글이 깨져서 들어온다.
			
	참고 ]
		한글이 포함된 파일을 Properties에서 사용하기 위해서 인코딩 시키는 방법
		
		1. cmd 창을 연다.
		2. path를 자바 Home으로 잡아준다.
		3. native2ascii 기능을 이용해서 인코딩 해준다.
		
			형식 ]
				native2ascii 현재파일 새로운파일
			
			예 ]
				native2ascii d:\sample.txt d:\sample_ko.txt
				
	참고 ] 
		Properties 클래스는 오직 String 으로만 키 값과 데이터를 처리해야 한다.
		
	참고 ]
		Properties는 이외에도 또 하나의 특징을 가지고 있는데
		현재 프로그램의 정보를 Map으로 자동 처리하는 기능을 가지고 있다.
		
-------------------------------------------------------------------------------------------------------------------------------------------

제너릭스(Generics)
==> 컬렉션은 모든 형태의 데이터를 모두 입력 받아 기억할 수 있다.
	하지만 실무에서는 한 가지 형태로 입력받는 것을 원칙으로 한다.
	
	그런데 꺼낼 때는 항상 형변환해서 꺼내야 한다.
	즉, 한 가지 형태로 결정해서 데이터를 입력했음에도
	꺼내서 사용할 때는 자동 형변환이 되지 않기 때문에
	항상 강제 형변환을 해줘야 한다.
	
	제너릭스란?
	==> 컬렉션에 입력하는 데이터를 미리 알려줌으로써
	나중에 꺼내서 사용할 때 좀 더 편하게(형변환없이) 꺼내서 사용 할 수 있도록 해주는 것.
	
	형식 ]
		ArrayList<String> list = new ArrayList<String>();
		
	참고 ]
		반드시 컬렉션 마다 모두 제너릭스 선언을 해줘야 한다.
		
		제너릭스는 전파되지 않는다.
		하나의 컬렉션이 제너릭스 선언되어도
		그 컬렉션을 이용하는 다른 컬렉션은 제너릭스를 잊어버린다.
		따라서 새로운 컬렉션도 다시 제너릭스 선언을 해줘야 한다.	 

	참고 ]
		특수한 제너릭스
			원래 제너릭스는 특정 클래스만 입력 받을 목적으로 사용된다.
			
			형식 ]
				<? super 클래스이름>
				==> 지정한 클래스포함 상위 클래스까지 허락
				
				<? extends 클래스이름>
				==> 지정한 클래스포함 하위 클래스까지 허락
				
			이 방법은 제너릭 선언을 하지 않은 것과 동일한 효과가 있다.	

-------------------------------------------------------------------------------------------------------------------------------------------

어노테이션
==> 내부적으로 약속된 실행을 자동으로 처리하도록 하는 명령의 일종
	주로
		화면에 실제 보이는 실행이 아니고
		점검을 하거나 선언적인 실행(이 클래스는 어떻게 동작되어야 한다)의 의미를 가진 명령을 말한다.
		
	형식 ]
		@명령
		
-------------------------------------------------------------------------------------------------------------------------------------------

























								
				