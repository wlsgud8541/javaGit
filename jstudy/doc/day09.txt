# day09

우리가 기억해야 할 메모리 공간

	1. Literal Pool
		==> 입력하는 데이터 자체(Literal)가 모여있는 메모리 공간
		
	2. Stack
		==> 함수내에서 만들어지는 변수들이 생성되는 메모리 공간
			함수 실행이 종료되면 즉시 삭제하는 것이 특징
	3. Heap
		==> 인스턴스 들이 올려지는 공간
			프로그램이 종료가 되도 계속 남아있다.
			==> 사용하지 않는 인스턴스들을 정리해서 삭제해주는 장치 : 가비지 컬렉터
			
			인스턴스가 heap 에 올려지는 순간
				new 명령이 실행되는 순간
	4. Static				
		==> 프로그램이 실행되는 순간 static 멤버들을 먼저 static 영역에 올려놓고 실행한다.
			따라서 
				같은 이름으로 두번 올려지지 않는다.
				여러 곳에서 사용한다면 공유해서 사용하게 된다.
				
				
-----------------------------------------------------------------------------------------------------------------------------
continue
==> for, while , do~while 에서만(반복문에서만) 적용되며
	현재 반복을 중지하고
	다음 반복을 처리하도록 하는 명령
	
	주의사항 ]
		다음 실행 부분이 조금씩 명령에 따라서 달라진다.
		
		1) for
		
			(1)
			for( (2) ; (3); (4)){
				(5)
				continue; (6)
				(7)
			}
			(8)
			
			실행순서
			1 -> 2 -> 5 -> 6 -> 4 -> 3 -> ...
			
		2) while
			
			while( (1) ) {
				(2)
				continue; (3)
				(4)
			}	
			(5)
			
			실행순서 ] 
				1 -> 2 -> 3 -> 1 -> ... (1)이 거짓이 될 때 까지 반복
				
		3) do ~ while
		
		(1)
		do {
			(2)
			continue; (3)
			(4)
		} while ( (5) );
		(6)
		
		실행순서 ]
			1 -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> .... (5)이 거짓이 될 때까지
			
			
		참고 ]
			continue 명령도 break 명령과 마찬가지로
			레이블을 붙여서 사용 할 수 있고
			그 명령이 속한 block 을 대상으로 작업을 수행한다.			

-----------------------------------------------------------------------------------------------------------------------------

배열
==> - 같은 형태의 데이터를 여러개 모아서 한꺼번에 관리하는 방식

	- 많은 데이터를 관리하는 경우 원칙적으로 데이터 갯수만큼 변수를 만들어야 한다.
	  이때 변수를 만들때나 데이터를 사용 할 때 불편함이 발생한다.
	  이런 문제를 해결하기 위한 방법으로 제시된 것이 배열이다.
	  
	  즉, 배열이란?
	  하나의 변수를 이용해서 여러개의 데이터를 관리 할 수 있더록 하는 것
	  
	  참고]
	  	자바에서의 변수 형태
	  	1. 기본형태(Primitive Type, Value Type)
	  		==> 변수에 기억된 내용이 데이터 자체의 주소를 기억
	  			따라서 변수를 찾으면 데이터를 바로 접근이 가능하다.
	  	
	  			기본 데이터타입 8가지로 만들어진 변수
	  			(boolean, char, byte, short, int, long, float, double)
	  	
	  	2. 참조형(Reference Type, 주소 타입)
	  		==> 변수에 기억된 내용이 인스턴스의 주소를 기억하는 경우
	  			변수를 찾으면 데이터를 접근 할 수 있는 것이 아니고
	  			데이터가 기억되어있는 인스턴스의 주소를 알려준다.
	  			
	  			기본데이터 타입 이외의 모양으로 만들어진 모든 변수
				==> class 타입	  			
	  				
		참고 ] heap 영역 특징
				
				특징 ] 1. 반드시 주소를 알아야 사용 할 수 있는 영역
					   2. 8가지 영역 중에서 크기가 가장 큰 영역이고 확장도 가능하다.
					   	  (부족하면 스스로가 다른 영역을 빼앗어서 Heap 영역으로 사용 할 수 있다.)
					   	  ==> 따라서 자바는 많은 야으이 데이터가 필요하면
					   	  	  이것은 Heap에 기억하도록 되어있다.
					   3. 원칙적으로 한번 만들어지면 그 프로그램이 종료될 때 까지 없어지지 않는 영역이다.
					   4. Heap 영역에 생기는 메모리는 자동 초기화 된다.	  	  
			
-----------------------------------------------------------------------------------------------------------------------------

배열을 만드는 방법
	
	1. 배열은 원칙적으로 데이터가 기억될 공간을 Heap에 만들어야 한다.
		
		명령어
			
			new 데이터타입[사용할갯수];
			
			==> 데이터타입 : Heap에 만들 데이터 영역의 형태를 지정
				사용할갯수 : Heap에 만들 데이터 영역의 갯수(크기)를 지정
				
			예]
			new int[10]
				==> Heap영역에 int 형 데이터를 기억 할 메모리 공간을 10개 만든다.
			
			new float[5]
				==> Heap영역에 float 형 데이터를 기억 할 메모리 공간을 5개 만든다.
			
			new String[3];
				==> Heap영역에 String 형 데이터를 기억 할 메모리 공간을 3개 만든다.					
				
	2. Heap 에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.
	
		명령어 ]
			데이터타입[]	변수이름;
			==>
				데이터타입[] : 자신이 관리할 Heap영역에 있는 실제 데이터 형태에 따라 달라진다. 			
								==> Heap Type
			예 ] int[] num;
				
			
			***
			결론적으로 Heap Type이 같은 주소만 기억 할 수 있다. 

			예] int[] num = new float[5]; // 안된다. <== Heap Type이 다르기 때문에 안된다.
				float[] num = new int[5]; // 이것 또한 안된다.
				
				int[] num = new int[10];  // 된다.

--------------------------------------------------------------------------------------------------------------------------------
배열 사용방법

	형식 ]
		변수[위치값];
		
		참고] 위치값은 0부터 시작한다.
		
	참고 ]
		배열주소.length
		==> 배열주소가 관리하는 곳에 있는 메모리의 갯수를 알려주는 명령
		
		예 ] int[] num = new int[10];
		
			 System.out.println(num.length);
			 ==> 10을 출력
		 	
	참고 ] 배열의 초기화
			==> 배열 메모리는 Heap 에 생기므로 자동으로 초기화가 이루어진다.
			 
			 	정수 : 0
			 	실수 : 0.0
			 	논리 : false
			 	문자 : 아스키코드값 0 으로
			 	
			 	클래스 : null
			 	
			 	경우에 따라서는 배열 메모리에 강제로 특정 값을 입력할 필요도 있다.
			 		==> 이것을 배열의 초기화 라고 표현한다.
			 	
			 	형식 ]
			 	
			 		int[] no = {1, 2, 3, 4, 5};
			 		int[] no = new int[]{1, 2, 3, 4, 5};

				***
				주의 ]
					배열을 초기화 할 경우에는 배열의 크기를 입력하지 못한다.
					대신 초기화 데이터를 이용해서 자동으로 배열의 크기가 결정된다.
					
				참고 ] Array.toString()
						==> 배열을 출력하기 위해서는 for 명령등 반복 명령을 이용해서 출력하는 것이 원칙이다.
							하지만 단순히 내용 확인만을 위한 목적이라면 이 방법이 좀 불편 할 수 있다.
							
						==> 배열에 있는 데이터를 출력하기 위한 명령으로
							배열이 가진 모든 데이터를 문자열로 변환해서 출력하는 기능을 가진 명령이다.
							
							배영 사용을 목적으로 사용해서는 안되고
							오직 중간 결과 확인을 위한 목적으로 사용해야 된다.	
							






				