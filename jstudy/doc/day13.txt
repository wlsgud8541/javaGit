# day13

함수(Method, Function)
==> 한가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램

	프로그램이란??
		이런 함수들이 모여서 원하는 목적을 이루도록 구성하는 것
			예 ] charAt() : 한 글자를 알아내는 작업을 실행하기 위해 만들어진 함수
				 random() : 난수 하나를 발생하는 작업을 실행하기 위해 만들어진 함수
				 
				 
	*****
	참고 ] 
		1. 함수는 누군가 호출을 해야 실행된다.
			즉, 스스로 실행되는 경우는 절대로 없다.
		
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행순서를 넘긴다.
		
			예 ]
				class Test {
					void abc(){
						(1)
					}
					
					public static void main(String[] args){
						(2)
						xyz(); // xyz 함수 호출 : xyz 함수의 내용을 실행
						(3)					
					}				 
					
					void xyz(){
						(4)
						abc(); // 함수호출 : abc함수의 내용을 실행
						(5)
					}
				}
				
				실행순서 ]
					2 -> 4 -> 1 -> 5 -> 3
					
					
	함수 만드는 방법]
		
		형식 ]
		
			System.arraycopy(원본배열, 복사시작위치, 복사본배열, 채워넣을시작위치, 채워넣을 갯수)
		
			[ 접근 지정자 ]		[ 속성 ] 	반환값타입		함수이름(매개변수리스트){
				실행내용...
				<== 이 함수가 해야 할 목적을 달성하기 위한 코드
			}					
			
			1. 함수이름
				==> 개발자가 지정하는 사용자 정의어에 해당
				
			2. 매개변수리스트
				==> 변수 선언 형태로 만드는 것이다.
					갯수는 상관없다. 필요한 만큼 나열하면 된다.
					
				예 ] void abc(int a, int b){
				
				}
				
				void xyz(int no, char ch, String str){
				
				}
			
				목적 ]
					이 함수가 원하는 일을 실행하기 위해서
					반드시 필요한 데이터가 있을 것이다.
					이 데이터를 기억할 준비를 하는 것이다.
				
				예 ]
					charAt(int pos) ==> 원하는 위치의 문자를 알려주는 함수
										이 함수가 원하는 작업을 충실히 수행하기 위해서는
										위치값이 필수적으로 필요하다.
										
					length()		==> 문자열의 길이를 알려주는 함수
										이 함수가 역할을 충실히 수행하기 위해서는 데이터가 필요하지 않다
										단순히 문자열의 문자갯수만 세어서 알려주면 된다.
					
					
			3. 반환값 타입
				==> 함수는 한 가지 목적을 달성하기 위한 가장 작은 단위의 프로그램
					따라서 함수를 실행한다는 것은 그 목적을 달생해야 한다는 것이 될 것이고
					그 달성된 목적에 따라서 결과가 존재해야 한다.
					
				반환값 타입이란?
					이처럼 함수에게 뭔가 일을 시켰을 때
					그 함수가 일을 한 결과를 알려주는 것이다.
					==> 이 결과는 경우에 따라서 달라진다.
						결과는 존재하는 결과값의 경우에 따라서 달라질 것이고
						따라서 결과값의 데이터 종류만 선언하면 된다.
						
						참고] 함수는 반드시 결과 값이 있는 것은 아니다.
							  예를 들어서
							  뭔가를 추력만 담당하는 함수가 있는 경우
							  이 함수는 출력을 하면 그 맡은 목적을 달성한 것이다.
							  따라서 결과물은 없게 되는 것이다.
							  
							  이런 경우에는 반환값타입에 아무것도 안써도 되는 것이 아니고
							  반드시 
							  		"void"
							  라고 써줘야 한다.
							  
						참고] 함수는 가장 작은 한 가지 목적을 위해 만들어지는 프로그램이다.
							  따라서 반환값은
							  ***** 
							  한개이거나 없을 수 있다.
							  반환값은 두 개 이상인 함수는 절대로 만들어질 수 없다.
							  
							  예]
							  		
							  		int, float abc(){
							  		
							  		}
							  		==> 절대로 만들어 질 수 없다.
							  		
							  해결방법]
							  		float[] abc(){
							  			float[] num = new float[2];
							  			num[0] = 10;
							  			num[1] = 3.14f;
							  			
							  			return num;
							  		}
							  		
							  		===================================================
							  		
							  		public class Data01{
							  			int no1;
							  			float no2;
							  		}
							  		
							  		Data abc(){
							  			Data01 d1 = new Data01();
							  			d1.no1 = 10;
							  			d1.no2 = 3.14f
							  			
							  			return d1;
							  		}
							  		
					결론 ]
						함수는 아래 네가지 형태를 벗어나지 않는다.
							
							1. void abc(){}
							2. int abc(){}
							3. void abc(int a){}
							4. int abc(int a){}
							
							
					참고 ]
						1. return 의 의미
							==> 함수 내에서 사용 할 수 있는 명령
						
							의미 ] 
								1.현재 실행중인 함수의 실행을 즉시 종료하세요.
								2. 반환값이 있으면 반환해주고 현재 실행중인 함수의 실행을 즉시종료하세요
					
								형식 1 ]
									return;
								
								형식 2 ]
									return 데이터;	
								
						2. - 반환값이 void인 경우는 반드시 'return;' 만 사용 할 수 있다.
						   - 반환 값이 void가 아닌 경우는 반드시 'return 데이터;' 만 사용해야한다.
						
						3. 반환값이 void인 경우는 return 명령을 생략 할 수도 있다.
							==> 함수의 {}를 마치는 순간 자동 종료되기 때문이다.
							하지만 반환값이 void가 아닌 경우에는 반드시 'return 데이터;' 를 사용해야한다.
							   
						   	 	  		
			
			6. 접근지정자
				
				사용 할 수 있는 권한을 지정하는 것
				
				1) public	 : 모든 곳에서 사용 가능
				2) protected : 같은 패키지, 상속받은 클래스 내에서만 사용
				3) (생략)	 : 같은 클래스, 같은 패키지 내에서만 사용
				4) private	 : 같은 클래스 내에서만 사용
			
-----------------------------------------------------------------------------------------------------------------------------
함수의 사용 방법
==> 함수는 반드시 호출을 해야만 실행이 된다.			
	함수를 사용한다는 것은 함수의 기능이 필요로 할 때 해당 함수를 호출한다는 것이 된다.
	
	형식 ] 함수이름(데이터1, 데이터2, ...);
		
		데이터란?
			함수는 그 함수가 실행되기 위해서 필요한 데이터를 받을 준비를 하고 있다.
			<== 매개변수리스트		
			따라서 그 함수에게 일을 시키기 위해서는
			필요한 데이터를 *반드시* 줘야 한다.
			==> 결론적으로 데이터(Parameter)란???
				함수가 준비하고 있는 매개 변수 리스트에 기억할 데이터를 제공하는 것
				
			데이터는 그 함수가 준비한 매개변수의 갯수와 반드시 일치해야 하고
			(==> 넘처도 안되고 모자라도 안된다.)
			
			그 형태 역시 일치해야한다.
			
			참고] 
				매개변수리스트가 다르다는 것은
				매개변수리스트에 정의한 변수들의 
				갯수가 다르거나
				타입이 다르거나
				순서가 다르거나
				일 것이다.
			
			예] 
				void abc(int a){
				}
				
				abc(); =======>x 매개변수 형태가 다르기 때문에 안된다.
				abc(5); ========>o
					
					==> 이때 입력한 정수 5는 매개변수 a에 대입이되서
						함수 내부에서 처리 될 것이다.
						int a;
						
						abc(5); ===> a=5;
					
					abc(2,4); =========> x 갯수가 다르기 때문에 안된다.
					abc(3.14); ========> x 형태가 다르기 때문에 안된다.
						
						
			예2]
				void xyz(double no){
				}
				
				xyz(); =========> x
				xyz(3.14); =======> o
				xyz(3.14, 10.); =======> x
				xyz(10); =========> o
					==> double no;
							xyz(10) ==> no = 10;
			
			
			예3]
			
				double hij(){
					return 10;	==> 반환값 타입 double이 반환해주는 데이터의 형태보다 크기 때문에 자동형변환된다.
				}
				
				Object lmn(){
					return new int[]{1,2,3}; ======>o
				}
				
-------------------------------------------------------------------------------------------------------------------
반환값 사용 방법
==> 함수는 실행이 종료되면 반환값을 줄 수 있다.				
	이 반환값은 함수 호출 부분에 그대로 들어가게 된다.
		
		int getTen(){
			return 10;
		}
		라고 정의된 함수가 있는 경우
		
		int num = getTen();
		==> int num = 10;
		
		그러므로 함수 호출 부분에 예상되는 반환 값을 기록해 보아서
		문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
		
		참고 ]
			반환값이 있는 함수라도
			필요하지 않는다면 반환값을 이용하지 않아도 상관없다.
			
============================================================================================
*****
함수 제작 위치
==> 자바에서 함수를 만드는 위치는
	반드시 클래스 블럭에 만들어야 한다.
	다른 곳에서는 절대로 만들 수 없다.
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			