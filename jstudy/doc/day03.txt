# day03

상수와 변수
	1. 상수 : 변하지 않는 값, 수정할 수 없는 변수
		==> 개발자가 프로그램에게 알려주는 데이터(정보)
			데이터자체를 가리키는 것으로 리터럴 이라고 표현한다.
			
			이 리터럴들은 "리터럴 풀"이라는 장소에 일단 저장한 후 사용된다.
			
			예]
			
				System.out.println("Hello"); 라고 명령하면
				 
				==>	실행순서
					
					1) "Hello" 라는 데이터를 리터럴 풀에 저장
					2) 리터럴 풀에 있는 데이터를 꺼내서 출력하게 된다.
					
				리터럴 풀에 쌓이는 데이터 종류 ]
				
					1) 정수형 : 일반적인 소수점이 없는 숫자
						- 10	  : 10진수
						- 010	  : 8진수
						- 0x10  : 16진수
						
						  예] int a = 10;	  ==> 10을 의미
							  int a = 0x10; ==> 16을 의미
						
					2) 실수형 : 소수점이 있는 숫자
						- 3.14  ==> 일반적인 소수 방식
						- 3.0e5 ==> 지수방식
									==> 3.0 * 10^5(10의 5승) 의 의미
					
						- 0.25e-7 ==> 0.25 * 10^-7(10의 -7승) ==> 0.25 * (1 / 10000000)
					
					3) 논리형 : 참(true), 거짓(false)을 의미하는 데이터
						- true, false 만 사용할 수 있는 데이터
							==> 위 두가지 이외의 데이터는 절대로 사용할 수 없다.
							
							boolean bool = true;
											
					4) 문자형 : 오직 한 글자로만 구성된 문자
						- 자바의 경우 입력한 문자를 UNI CODE 방식으로 변환해서 기억하게 된다.
						
							'a' ==> 97 이 기억된다.
							'\u0000' : 실제 유니코드의 코드값을 이용해서 기억시킬 수 있다.
						
					5) 문자열형 : 한글자 이상으로 구성된 문자
						- 이 타입은 기본 상수는 아니다.
						  하지만 개발자 입장에서 매우 빈번하게 사용하는 형태이므로
						  자바에서도 기본타입처럼 사용할 수 있도록 편의성을 제공해주고 있는 것일 뿐이다.
						  
						  
	2. 변수
	
		변수의 필요성
			- 입력한 데이터는 일단 리터럴 풀에 저장된다. 그리고 프로그램이 리터럴 풀에 있는 데이터를 꺼내서 사용하게 된다.
			  리터럴 풀은 수소를 모르면 사용 할 수 없다.
			  즉, 변수는 리터럴 풀에 저장된 데이터를 개발자가 사용 할 수 있도록 주소를 기억하는 방법이다.
			  
		    - 개발자가 쉽게 사용 할 수 있는 영역은 Stack영역이다.
		      따라서 스택으로 데이터의 주소를 기억시켜서 사용하게 된다.		
		      
		    참고] Stack 영역의 특징
		    	  1. 메모리에 별칭을 붙여서 사용할 수 있는 영역
		    	  	  ==> 별칭은 개발자가 붙이는 것으로 개발자가 가장 손쉽게 사용 할 수 있는 영역. 즉, 변수명
		    	  
		    	  2. 8개의 영역중에서 리터럴 풀 다음으로 가장 작은 영역
		    	  	  ==> 많은 양의 데이터를 보관하면 문제가 생길 수 있다.
		    	  
		    	  3. 리터럴 풀에 있는 데이터를 Stack에 기억시키는 방법
		    	  	  1) 스택에 필요한 메모리를 할당 받는다.
		    	  	  	 
		    	  	  	 - 형식] 데이터타입 변수명;
		    	  	  	 
		    	  	  	 - 예시] int no;
		    	  	    
		    	  	     - 참고] 변수이름은 위에서 설명한 Stack에 붙이는 별칭. 따라서 이 변수 이름만 기억하고 있으면 언제든지 이 영역을 사용 할 수 있다.
		    	  	  
		    	  	  2) 대입 연산자를 이용해서 필요한 데이터의 주소를 기억한다.
		    	  	  	
		    	  	  	 - 형식] 변수이름 = 데이터;
		    	  	  	 
		    	  	  	 - 예시] no = 10;
		    	  	  	 
		    	  	  	 - 참고] Stack 영역에 메모리를 할당받는 방법
		    	  	  	 		 ==> JVM에게 할당받을 메모리 크기와 저장할 데이터의 형태를 알려줘야한다.     
				  				 
				  				 * 데이터의 형태
				  					1) 논리형 : boolean  ->  1byte
				  					
				  					2) 문자형 : char     ->  2byte
				  					
				  					3) 정수형 : byte     ->  1byte
				  								short    ->  2byte
				  								int      ->  4byte	* 기본 데이터 타입
				  								long     ->  8byte
				  					
				  					4) 실수형 : float    ->  4byte
				  								double   ->  8byte	* 기본 데이터 타입
				  					
				  					5) 문자열형 : String ->  정할 수 없음
	
									예시] 정수를 기억할 메모리를 할당 받고 싶다면,
										  
										  ==> int no;   //변수 선언
										      no = 10;  //리터럴 풀에 데이터를 기억시키고 
										  			    //기억된 공간의 주소를 no라는 변수에 기억
										  			    //변수 초기화
	
				  						  ==> 이 후 부터는 no라는 별칭을 이용해서 그 안에 기억된 데이터를 사용 할 수 있다.

	----------------------------------------------------------------------------------------------------------------------------------------------------
				  						  
			참고] 
				변수의 종류
					1. 기본형변수
					2. 참조형변수
						예 ] 
							public class Box{
								int no;
								public void abc(){};
							}	-- Box라는 class를 만들었다고 가정
							
							Box b1;
							b1 = new Box();
							
							b1.no;
							b1.abc();  						  
				  			
	----------------------------------------------------------------------------------------------------------------------------------------------------				  
				  
	형변환(Casting)				  
		==> 데이터의 형태는 필요에 따라 다른 형태로 변환시켜서 사용 할 수 있다.			  
	
		예]
			int no = (int)3.14;
			
		방법 ]
			1. 자동형변환
				==> 개발자가 지정하지 않아도 자동적으로 형태를 바꿔서 사용되는 경우
					
					- 발생하는 경우
					  ==> 작은 형태의 데이터가 큰 형태의 데이터로 필요한 경우 자동 형변환이 일어난다.
					  
					  예시] 
					  		float a = 10;  ==>  가능
					  		float b = 10.; ==>  불가능(10. 은 double타입의 데이터)
					  				
			2. 강제형변환
				==> 자동 형변환이 불가능한 경우, 경우에 따라서 개발자가 강제로 형변환을 요구 할 필요가 있다.
					
					형식] (변환 할 타입) 데이터;
					
					예시]
						  float b = (float)10.;
					
					참고] 강제형변환을 하면 데이터가 손실 될 위험이 존재한다.
						  
					
			3. 리터럴형변환
				==> 리터럴 풀의 메모리 크기를 원하는 크기로 변경하는 방법
					
					참고 ] 리터럴 풀은 데이터의 기본형으로 결정된다.
				
					예시 ] 정수 - 4byte
						   실수 - 8byte
				
					형식 ] 데이터F(또는 f) ==> 리터럴 풀의 크기를 4 byte로 만드세요.
						   
						   데이터L(또는 l) ==> 리터럴 풀의 크기를 8 byte로 만드세요. 	  
				  
				  
				  
				  		  